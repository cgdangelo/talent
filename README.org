* Talent

+A framework for identifying hype.+ Maybe someday. :smile:

For now: yet another GoldSrc parser, built with [[https://github.com/gcanti/fp-ts/][fp-ts]].

** Packages

| [[https://github.com/cgdangelo/talent/tree/main/packages/cli][@talent/cli]]            | Runs the demo parser and logs to console.   |
| [[https://github.com/cgdangelo/talent/tree/main/packages/parser][@talent/parser]]         | General use parser combinators.             |
| [[https://github.com/cgdangelo/talent/tree/main/packages/parser-buffer][@talent/parser-buffer]]  | Parser combinators for a [[https://nodejs.org/api/buffer.html][Buffer]].            |
| [[https://github.com/cgdangelo/talent/tree/main/packages/parser-goldsrc][@talent/parser-goldsrc]] | Parser combinators for a GoldSrc demo file. |

** What's working?

Demos can be parsed in their entirety, with the exception of the messages contained within the [[https://github.com/cgdangelo/talent/tree/main/packages/parser-goldsrc#netmessage][NetMsg bitstream field]].

** +What's coming?+ What's maybe coming?

The original goal of this project was to create a GoldSrc demo parser that could translate in-game events into readable data structures and emit them through observables for analysis. In particular, the ability to identify "hype" moments through some set of heuristics, such as:

1. Multi-kills: Multiple frags at (roughly) the same timestamp, implying only one shot fired.
2. Fast-paced streaks: multiple frags within a short period of time.
3. High survivability: High number of frags between spawn and death.
4. Events leading to a win condition, such as:
   - (Counter-Strike) Defusing the bomb with enemy players still alive could be a ninja defuse.
   - (Counter-Strike) Multiple kills in a disadvantaged situation (1v3, 1v4, 1v5) into a bomb defusal. This could be a CT retaking the bomb site and clutching the round.
   - (Day of Defeat) Multiple kills into a round win. This could be a streak that leads to a cap-out.
5. Events that are otherwise important because of their circumstances:
   - (Day of Defeat) Breaking a double cap in progress when the enemy team controls all other flags, thereby preventing a cap-out.
   - A rapid change in crosshair angles followed by a kill. This could be a flick shot.

** Prior art

- https://github.com/vinceau/project-clippi

  /An automation framework for Super Smash Bros. Melee./

  The SSBM version of this tool that provided much of my initial inspiration.

** References

- https://github.com/YaLTeR/hldemo-rs

  /Half-Life demo format parser using [[https://crates.io/crates/nom][nom]]./

  This was the most comprehensive (and readable) source of demo format information that I found and was a great starting point. It also heavily inspired me to refactor the original mess I had into parser combinators ([[https://github.com/cgdangelo/talent/pull/16][Parsing cleanup (#16)]]).

- https://github.com/jpcy/coldemoplayer

  /compLexity Demo Player is the official Counter-Strike demo player of compLexity Gaming./

  Lots of helpful examples of handling edge cases, minor differences in demo file formats, conversion and repair strategies, etc.

- https://github.com/skyrim/hlviewer.js

  /Half-Life in WebGL./

  Probably the best source of frame data information, especially the custom messages' (messages beyond the bounds of the =SVC_XYZ= engine messages enumeration) data.

- https://wiki.alliedmods.net/Half-Life_1_Engine_Messages

  Straightforward source of frame data information re: engine messages. Often includes some much needed context alongside the actual structure.
